#+title My Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle /home/ceco/.emacs :mkdirp yes

* Enable package repositories
  Enable *MELPA*.

  #+begin_src emacs-lisp 
 (require 'package)

 (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                          ("org" . "https://orgmode.org/elpa/")
                          ("elpa" . "https://elpa.gnu.org/packages/")))

 (package-initialize)
 
 (unless package-archive-contents
  (package-refresh-contents))

  #+end_src 
  
  Install *use-package*.
  #+begin_src emacs-lisp

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package) 
  (setq use-package-always-ensure t)
  #+end_src 

  Enable *QELPA* to install packages from source.
  #+begin_src emacs-lisp
  (unless (package-installed-p 'quelpa)
  (with-temp-buffer
  (url-insert-file-contents "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el")
  (eval-buffer)
  (quelpa-self-upgrade)))
  #+end_src

* UI Configuration
  
  #+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  #+end_src

  Load *NANOEmacs* themes.
  #+begin_src emacs-lisp

  (add-to-list 'load-path "~/.emacs.d/nano-emacs/")
  
  (require 'nano-faces)
  (nano-faces)

  (require 'nano-theme)
  (nano-theme)

  (require 'nano-help)
  (require 'nano-layout)
  (require 'nano-modeline) ;; Nano-modeline hides some useful information; for the time being, I will switch it off

  ;; Nano counsel configuration (optional)
  ;; Needs "counsel" package to be installed (M-x: package-install)
  (require 'nano-counsel)

  (add-hook 'prog-mode-hook (lambda () (display-line-numbers-mode 1)))
  #+end_src

  Color brackets at different levels differently.

  #+begin_src emacs-lisp
  (use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
  #+end_src
  
  Highlight code in code blocks
  #+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
  #+end_src
  
  Show beautiful icons with *all-the-icons*
  #+begin_src emacs-lisp
 (use-package all-the-icons
   :if (display-graphic-p)
   :commands (all-the-icons-install-fonts))
  ; :init
  ; (unless (find-font (font-spec "all-the-icons"))
  ;   (all-the-icons-install-fonts t))) 

  #+end_src
  
* Keybindings
  Load *evil* and its keybindings. 

  #+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

  #+end_src

  #+begin_src emacs-lisp
 (use-package evil-collection
  :after evil
  :config
  (evil-collection-init)) 
  (setq evil-want-keybinding nil)

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit) 
  ;; (global-set-key (kbd "C-M-j") 'counsel-switch-buffer)
  #+end_src
  
* Autocomplete
  Suggestions about how to complete commands with *which-key*
  #+begin_src emacs-lisp
  (use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config (setq which-key-idle-delay 0.3)) 
  #+end_src

  Load *ivy* - a generic completion mechanism.
  #+begin_src emacs-lisp
  (use-package ivy
  :diminish ivy
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1)
  (setq ivy-height 5)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq ivy-re-builders-alist
	'((t . ivy--regex-ignore-order))
	 ))
  #+end_src

  Provide information about suggested commands with *ivy-rich*.
  #+begin_src emacs-lisp
  (use-package ivy-rich
  :init (ivy-rich-mode 1)) 
  #+end_src

  A collection of ivy-enhanced versions of common Emacs commands with *counsel*.
  #+begin_src emacs-lisp
  (use-package counsel
     :bind (("M-x" . counsel-M-x)
   	    ("C-x b" . counsel-ibuffer)
	    ("C-x C-f" . counsel-find-file)
	    :map minibuffer-local-map
	    ("C-r" . 'counsel-minibuffer-history))
     :config
  (setq ivy-initial-input-alist nil)) 
  #+end_src

  Enhance Emacs documentation with *helpful*.
  #+begin_src emacs-lisp
  (use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key)) 
  #+end_src
  
  Better completions with *company-mode*. Only use for completion in *lsp-mode*.
  #+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
                ("<tab>" . company-indent-or-complete-common))
    :custom
     (company-minimum-prefix-length 1)
     (company-idle-delay 0.0))
  
  (use-package company-box
     :hook (company-mode . company-box-mode))
  #+end_src
* Languages
** Language server

   Note that R, Racket, and Clojure have LSP mode available. Check https://emacs-lsp.github.io/lsp-mode/page/languages/ for all available languages and how to install.
   #+begin_src emacs-lisp
   
   (defun my-lsp-mode-setup ()
   ;; enable headerline
      (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
      (lsp-headerline-breadcrumb-mode))

   (use-package lsp-mode
     :commands (lsp lsp-deffered)
     :hook
       (lsp-mode . my-lsp-mode-setup)
     :init 
       (setq lsp-keymap-prefix "C-c l")
     :config
       (lsp-enable-which-key-integration t)) 
       
   ;(use-package lsp-treemacs
   ;  :after lsp)
   (use-package lsp-ivy)

   #+end_src

** Racket
#+begin_src emacs-lisp

(use-package racket

)

#+end_src
** Clojure
   #+begin_src emacs-lisp
   (use-package cider

   )
   #+end_src 

** R
   #+begin_src emacs-lisp

   (use-package ess
   :config
   ;(use-package ess-r-mode)
   (setq ess-backend 'lsp
          ess-style 'RStudio
          ess-use-flymake nil) 
   :hook (ess-r-mode . lsp-deferred))  

   #+end_src

** Common Lisp
  #+begin_src emacs-lisp
  (use-package slime
  :config
  (setq inferior-lisp-program "sbcl"))
  #+end_src

** JavaScript
   #+begin_src emacs-lisp
;   (use-package js2-mode
;   :config
;   (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
;   :hook
;   (js2-mode-hook . js2-imenu-extras-mode))

   #+end_src

** Projectile 
* Org-mode
** General org setup
   #+begin_src emacs-lisp
   (defun org-mode-setup ()
     (org-indent-mode)
     (variable-pitch-mode 1)
     (visual-line-mode 1))

   (use-package org
   :hook (org-mode . org-mode-setup))

   #+end_src
   
** Nices org bullets
  Make bullets in org-mode prettier, set a custom theme.
  #+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :custom
    (org-bullets-bullet-list '("⁙" "⁛" "።" "჻" "፦" "᎓"))
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))) 
  #+end_src 
  
** Structured templates
#+begin_src emacs-lisp

(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("rk" . "src racket"))
(add-to-list 'org-structure-template-alist '("cl" . "src lisp"))
(add-to-list 'org-structure-template-alist '("R" . "src R"))
(add-to-list 'org-structure-template-alist '("cj" . "src clojure"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src

** Auto-tangle emacs configuration
  #+begin_src emacs-lisp

 ; (org-babel-tangle)
 ; (defun org-babel-tangle-config ()
 ; (when (string-equal (buffer-file-name)
 ;                     (expand-file-name "~/Emacs.org"))
 ;    (let ((org-confirm-babel-evaluate nil))
 ;       (org-babel-tangle))))
   
 ; (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'org-babel-tangle-config)))

  #+end_src

** Org-babel
  Load languages that I use in org-babel.
  #+begin_src emacs-lisp
  (org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t)
    ;(lisp . t)
    ;(clojure . t)
    ;(scheme . t)
    (python . t)
    (R . t)))
  #+end_src
* OS
** Terminal 
   Set default shell in *term-mode*.
   #+begin_src emacs-lisp

   (use-package term
     :config (setq explicit-shell-file-name "bash"))

   #+end_src

   Add 256-bit color in *term-mode*. *ncurses* package needs to be installed.

   #+begin_src emacs-lisp
   
   (use-package eterm-256color
     :hook (term-mode . eterm-256color-mode))

   #+end_src
   
   *vterm* uses a natively compile library (instead of being an interpreted e-lisp program  like *term-mode*). Their homepage has some configuraiton info.

   #+begin_src emacs-lisp

   (use-package vterm
     :commands vterm
     
   )

   #+end_src

   *shell-mode* is a middle-ground between running a shell in the background, while also being integrated with Emacs. Because of that, *evil-mode* bindings work in *shell-mode*. Also, it stores the history of previously typed commands. That said. it is not ideal. Perhaps, *eshell* is the better option if one is looking for better Emacs integration. Performance is not great though. 
** File management with dired
   *dired* uses *ls* to show the content of the current directory. *dired-single* prevents *dired* from creating new buffers for each open directory.


   #+begin_src emacs-lisp

   (use-package dired
     :ensure nil
     :commands (dired dired-jump)
     :bind (("C-x C-j" . dired-jump))
     :custom ((dired-listing-switches "-ago --group-directories-first"))
     :config
       (evil-collection-define-key 'normal 'dired-mode-map
         "h" 'dired-single-up-directory
	 "l" 'dired-single-buffer))

   (use-package dired-single)
   
   #+end_src
   
   Add icons to *dired*

   #+begin_src emacs-lisp

   (use-package all-the-icons-dired
   :if (display-graphic-p)
   :hook (dired-mode . all-the-icons-dired-mode)) 

   (add-hook 'dired-mode-hook 'all-the-icons-dired-mode) 

   #+end_src

   Open certain files with external programs.

   #+begin_src emacs-lisp

   (use-package dired-open
     :custom
     ((dired-open-extensions '(("png" . "feh")
                                   ("mkv" . "mpv")
                                   ("pdf" . "zathura")))))

   #+end_src

   Hide hidden and dot files.

   #+begin_src emacs-lisp

   (use-package dired-hide-dotfiles
   :hook (dired-mode . dired-hide-dotfiles-mode)
   :config 
   (evil-collection-define-key 'normal 'dired-mode-map
   "H" 'dired-hide-dotfiles-mode))

   #+end_src
* Todo
** UI
- in org mode, source blocks need to have a (maybe grey) background color with block beginning and end highlighted with a darker color
- company mode colors needs to change; use same background color as for code block beginning and end
- light gray used at many places needs to be slightly darker; right now it is difficult to see tables, comments and a lot of code
- some parts from doom-modeline (such as segment showing mode; suggestions and so on) need to be integrated into the nano-modeline
- org document titles need to be larger and bold
** Bindings
- swtich between windows with SPACE + 1/2/3...
- a single shortcut (C + b maybe) to list all buffers
- a simple shortcut for moving between buffers
** Behavior
- creating a new line in a list adds a list item
  
